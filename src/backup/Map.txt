import { useState, useEffect } from "react";
import { MapContainer, TileLayer, Marker, Popup, Tooltip, LayersControl, useMap } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import { companies } from "./data/companies";
import { lgas } from "./data/lgas";
import { fetchTemperature } from "./utils/weather";
import { commodityPrices } from "./data/commodity";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";
import KmlLayer from "react-leaflet-kml";
import MarkerClusterGroup from "react-leaflet-markercluster";
import "leaflet.markercluster/dist/MarkerCluster.css";
import "leaflet.markercluster/dist/MarkerCluster.Default.css";
import { irrigationSchemes } from "./data/irrigationSchemes";
import { lgacrops } from "./data/lgacrops";
import markets from "./data/markets"; // Import markets data


// Custom Control Component for Clustering Toggle
const ClusteringToggleControl: React.FC<{
  isClusteringEnabled: boolean;
  setIsClusteringEnabled: (enabled: boolean) => void;
}> = ({ isClusteringEnabled, setIsClusteringEnabled }) => {
  const map = useMap();

  useEffect(() => {
    const controlDiv = L.DomUtil.create("div", "leaflet-control leaflet-bar");
    controlDiv.style.background = "white";
    controlDiv.style.padding = "10px";
    controlDiv.style.borderRadius = "8px";
    controlDiv.style.boxShadow = "0 2px 6px rgba(0, 0, 0, 0.3)";
    controlDiv.style.fontFamily = "Arial, sans-serif";
    controlDiv.style.fontSize = "14px";
    controlDiv.style.color = "#333";

    const label = L.DomUtil.create("label", "", controlDiv);
    label.style.display = "flex";
    label.style.alignItems = "center";
    label.style.gap = "8px";

    const checkbox = L.DomUtil.create("input", "", label) as HTMLInputElement;
    checkbox.type = "checkbox";
    checkbox.checked = isClusteringEnabled;
    checkbox.style.width = "16px";
    checkbox.style.height = "16px";
    checkbox.style.cursor = "pointer";
    checkbox.onchange = () => setIsClusteringEnabled(checkbox.checked);

    const text = L.DomUtil.create("span", "", label);
    text.innerText = "Enable Clustering";
    text.style.color = "#333"; // Ensure text is visible
    text.style.cursor = "pointer";

    const customControl = L.control({ position: "topright" });
    customControl.onAdd = () => controlDiv;
    customControl.addTo(map);

    return () => {
      customControl.remove();
    };
  }, [isClusteringEnabled, setIsClusteringEnabled, map]);

  return null;
};

const IrrigationSchemesToggleControl: React.FC<{
  showIrrigationSchemes: boolean;
  setShowIrrigationSchemes: (enabled: boolean) => void;
}> = ({ showIrrigationSchemes, setShowIrrigationSchemes }) => {
  const map = useMap();

  useEffect(() => {
    const controlDiv = L.DomUtil.create("div", "leaflet-control leaflet-bar");
    controlDiv.style.background = "white";
    controlDiv.style.padding = "10px";
    controlDiv.style.borderRadius = "8px";
    controlDiv.style.boxShadow = "0 2px 6px rgba(0, 0, 0, 0.3)";
    controlDiv.style.fontFamily = "Arial, sans-serif";
    controlDiv.style.fontSize = "14px";
    controlDiv.style.color = "#333";

    const label = L.DomUtil.create("label", "", controlDiv);
    label.style.display = "flex";
    label.style.alignItems = "center";
    label.style.gap = "8px";

    const checkbox = L.DomUtil.create("input", "", label) as HTMLInputElement;
    checkbox.type = "checkbox";
    checkbox.checked = showIrrigationSchemes;
    checkbox.style.width = "16px";
    checkbox.style.height = "16px";
    checkbox.style.cursor = "pointer";
    checkbox.onchange = () => setShowIrrigationSchemes(checkbox.checked);

    const text = L.DomUtil.create("span", "", label);
    text.innerText = "Irrigation Schemes";
    text.style.color = "#333"; // Ensure text is visible
    text.style.cursor = "pointer";

    const customControl = L.control({ position: "topright" });
    customControl.onAdd = () => controlDiv;
    customControl.addTo(map);

    return () => {
      customControl.remove();
    };
  }, [showIrrigationSchemes, setShowIrrigationSchemes, map]);

  return null;
};

const customIcon = new L.Icon({
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
  iconSize: [15, 25],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
});

// Define custom icons for each category
const categoryIcons: { [key: string]: L.Icon } = {
  "Contract Farming": L.icon({
    iconUrl: "/icons/contract.png", // Replace with the actual path to your icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  "Fertilizer Company": L.icon({
    iconUrl: "/icons/fert.png", // Replace with the actual path to your icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  "Seeds Company": L.icon({
    iconUrl: "/icons/seed.png", // Replace with the actual path to your icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Processors: L.icon({
    iconUrl: "/icons/processor.png", // Replace with the actual path to your icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Aggregator: L.icon({
    iconUrl: "/icons/aggregator.png", // Replace with the actual path to your icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Mechanization: L.icon({
    iconUrl: "/icons/mech.png", // Replace with the actual path to your icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Default: L.icon({
    iconUrl: "/icons/fert.png", // Replace with the actual path to your default icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
};

const irrigationIcon = L.icon({
  iconUrl: "/icons/irrigation.png", // Replace with the actual path to your irrigation icon
  iconSize: [32, 32],
  iconAnchor: [16, 32],
  popupAnchor: [0, -32],
});

const cropIcons: { [key: string]: L.Icon } = {
  Maize: L.icon({
    iconUrl: "/icons/maize.png", // Replace with the actual path to your maize icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Rice: L.icon({
    iconUrl: "/icons/rice.png", // Replace with the actual path to your rice icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Groundnut: L.icon({
    iconUrl: "/icons/groundnut.png", // Replace with the actual path to your groundnut icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Soybean: L.icon({
    iconUrl: "/icons/soybean.png", // Replace with the actual path to your soybean icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Sorghum: L.icon({
    iconUrl: "/icons/sorghum.png", // Replace with the actual path to your sorghum icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
  Default: L.icon({
    iconUrl: "/icons/default.png", // Replace with the actual path to your default icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  }),
};

const marketIcon = L.icon({
  iconUrl: "/icons/market.png", // Replace with the actual path to your market icon
  iconSize: [32, 32], // Adjust the size of the icon
  iconAnchor: [16, 32], // Anchor the icon to the correct position
  popupAnchor: [0, -32], // Position the popup relative to the icon
});

const createClusterCustomIcon = (cluster: any) => {
  const count = cluster.getChildCount(); // Get the number of markers in the cluster
  return L.divIcon({
    html: `<div style="background-color: #4CAF50; color: white; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-size: 14px; font-weight: bold;">${count}</div>`,
    className: "custom-cluster-icon",
    iconSize: [40, 40],
  });
};

interface SidebarProps {
  displayMode: string;
  setDisplayMode: (mode: string) => void;
  selectedCategory: string;
  setSelectedCategory: (category: string) => void;
  selectedCommodity: string;
  setSelectedCommodity: (commodity: string) => void;
  categories: string[];
  commodityTypes: string[];
  selectedCrop: string;
  setSelectedCrop: (crop: string) => void;
  selectedLgaCrops: { lga: string; crops: string[] } | null;
  selectedMarket: {
    name: string;
    lga: string;
    latitude: number;
    longitude: number;
    operatingDays: string;
    description: string;
    commodities: string[];
  } | null;
  selectedMarketCommodity: string;
  setSelectedMarketCommodity: (commodity: string) => void;
  selectedCompany: Company | null; // Add selectedCompany
}

const Sidebar: React.FC<SidebarProps & { selectedLgaCrops: { lga: string; crops: string[] } | null }> = ({
  displayMode,
  setDisplayMode,
  selectedCategory,
  setSelectedCategory,
  categories,
  selectedCommodity,
  setSelectedCommodity,
  commodityTypes,
  selectedCrop,
  setSelectedCrop,
  selectedLgaCrops, // Add selectedLgaCrops as a prop
  selectedMarket, // Add selectedMarket as a prop
  selectedMarketCommodity, // Add selectedMarketCommodity as a prop
  setSelectedMarketCommodity, // Add setSelectedMarketCommodity as a prop
  selectedCompany, // Add selectedCompany as a prop
}) => {
  return (
    <div className="sidebar w-1/5 p-4 bg-gray-800 shadow-lg border-r border-gray-700 flex flex-col space-y-4">
      {/* Display Mode Buttons */}
      <button
        className={`w-full px-3 py-1 rounded-md shadow-sm text-sm transition-all ${
          displayMode === "companies"
            ? "bg-green-600 text-white"
            : "bg-gray-700 text-gray-300"
        }`}
        onClick={() => setDisplayMode("companies")}
      >
        üè¢ Companies
      </button>
      <button
        className={`w-full px-3 py-1 rounded-md shadow-sm text-sm transition-all ${
          displayMode === "temperature"
            ? "bg-green-600 text-white"
            : "bg-gray-700 text-gray-300"
        }`}
        onClick={() => setDisplayMode("temperature")}
      >
        üå° Weather Report
      </button>
      <button
        className={`w-full px-3 py-1 rounded-md shadow-sm text-sm transition-all ${
          displayMode === "commodityPrices"
            ? "bg-green-600 text-white"
            : "bg-gray-700 text-gray-300"
        }`}
        onClick={() => setDisplayMode("commodityPrices")}
      >
        üìä Commodity Prices
      </button>
      <button
        className={`w-full px-3 py-1 rounded-md shadow-sm text-sm transition-all ${
          displayMode === "crops"
            ? "bg-green-600 text-white"
            : "bg-gray-700 text-gray-300"
        }`}
        onClick={() => setDisplayMode("crops")}
      >
        üåæ Crops
      </button>
      <button
        className={`w-full px-3 py-1 rounded-md shadow-sm text-sm transition-all ${
          displayMode === "markets"
            ? "bg-green-600 text-white"
            : "bg-gray-700 text-gray-300"
        }`}
        onClick={() => setDisplayMode("markets")}
      >
        üè¨ Major Markets
      </button>

      {/* Category Filter for Companies */}
      {displayMode === "companies" && (
        <div className="space-y-2">
          <h3 className="text-md font-semibold text-gray-300">Filter by Category</h3>
          <select
            className="w-full border border-gray-600 rounded-md p-2 bg-gray-700 text-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
          >
            {categories.map((category) => (
              <option key={category} value={category}>
                {category}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* Commodity Filter */}
      {displayMode === "commodityPrices" && (
        <div className="space-y-2">
          <h3 className="text-md font-semibold text-gray-300">Filter by Commodity</h3>
          <select
            className="w-full border border-gray-600 rounded-md p-2 bg-gray-700 text-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
            value={selectedCommodity}
            onChange={(e) => setSelectedCommodity(e.target.value)}
          >
            {commodityTypes.map((commodity) => (
              <option key={commodity} value={commodity}>
                {commodity}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* Crop Filter */}
      {displayMode === "crops" && (
        <div className="space-y-2">
          <h3 className="text-md font-semibold text-gray-300">Filter by Crop</h3>
          <select
            className="w-full border border-gray-600 rounded-md p-2 bg-gray-700 text-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
            value={selectedCrop}
            onChange={(e) => setSelectedCrop(e.target.value)}
          >
            <option value="All">All Crops</option>
            {[...new Set(lgacrops.flatMap((lga) => lga.crops))].map((crop) => (
              <option key={crop} value={crop}>
                {crop}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* Display Selected LGA and Crops */}
      {displayMode === "crops" && selectedLgaCrops && (
        <div className="mt-4 p-4 bg-gray-700 rounded-md shadow">
          <h3 className="text-lg font-bold text-white">{selectedLgaCrops.lga}</h3>
          <ul className="mt-2 text-sm text-gray-300">
            {selectedLgaCrops.crops.map((crop, index) => (
              <li key={index}>üåæ {crop}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Display Selected Market Details */}
      {displayMode === "markets" && selectedMarket && (
        <div className="mt-4 p-4 bg-gray-700 rounded-md shadow">
          <h3 className="text-lg font-bold text-white">{selectedMarket.name}</h3>
          <p className="text-sm text-gray-300">
            <strong>LGA:</strong> {selectedMarket.lga}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Operating Days:</strong> {selectedMarket.operatingDays}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Description:</strong> {selectedMarket.description}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Commodities:</strong>
          </p>
          <ul className="mt-2 text-sm text-gray-300">
            {selectedMarket.commodities.map((commodity, index) => (
              <li key={index}>üåæ {commodity}</li>
            ))}
          </ul>
        </div>
      )}

      {/* Commodity Filter for Markets */}
      {displayMode === "markets" && (
        <div className="space-y-2">
          <h3 className="text-md font-semibold text-gray-300">Filter by Commodity</h3>
          <select
            className="w-full border border-gray-600 rounded-md p-2 bg-gray-700 text-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
            value={selectedMarketCommodity}
            onChange={(e) => setSelectedMarketCommodity(e.target.value)}
          >
            <option value="All">All Commodities</option>
            {[...new Set(markets.flatMap((market) => market.commodities))].map(
              (commodity) => (
                <option key={commodity} value={commodity}>
                  {commodity}
                </option>
              )
            )}
          </select>
        </div>
      )}

      {/* Display Selected Company Details */}
      {displayMode === "companies" && selectedCompany && (
        <div className="mt-4 p-4 bg-gray-700 rounded-md shadow">
          <h3 className="text-lg font-bold text-white">{selectedCompany.name}</h3>
          <p className="text-sm text-gray-300">
            <strong>Category:</strong> {selectedCompany.category}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Office Address:</strong> {selectedCompany.officeAddress}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Contact Person:</strong> {selectedCompany.contactPerson}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Phone Number:</strong> {selectedCompany.phoneNumber}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Email/Website:</strong> {selectedCompany.emailWebsite}
          </p>
          <p className="text-sm text-gray-300">
            <strong>Commodities:</strong> {selectedCompany.commodity.join(", ")}
          </p>
        </div>
      )}
    </div>
  );
};

const CenterMapOnClick: React.FC<{ position: [number, number] }> = ({ position }) => {
  const map = useMap();

  useEffect(() => {
    if (position) {
      map.setView(position, map.getZoom(), { animate: true });
    }
  }, [position, map]);

  return null;
};

const Map = () => {
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [selectedCommodity, setSelectedCommodity] = useState("All");
  const [temperatures, setTemperatures] = useState<{ [key: string]: number | null }>({});
  const [displayMode, setDisplayMode] = useState<string>("companies");
  const [isClusteringEnabled, setIsClusteringEnabled] = useState(false);
  const [showIrrigationSchemes, setShowIrrigationSchemes] = useState(true);
  const [selectedIrrigationScheme, setSelectedIrrigationScheme] = useState<{
    name: string;
    coordinates: [number, number];
  } | null>(null);
  const [selectedCrop, setSelectedCrop] = useState<string>("All");
  const [selectedLgaCrops, setSelectedLgaCrops] = useState<{
    lga: string;
    crops: string[];
  } | null>(null);
  const [selectedMarket, setSelectedMarket] = useState<{
    name: string;
    lga: string;
    latitude: number;
    longitude: number;
    operatingDays: string;
    description: string;
    commodities: string[];
  } | null>(null); // New state for selected market
  const [selectedMarketCommodity, setSelectedMarketCommodity] = useState<string>("All");
  interface Company {
    id: number;
    name: string;
    category: string;
    commodity: string[];
    officeAddress: string;
    contactPerson: string;
    phoneNumber: string;
    designation: string;
    emailWebsite: string;
    coordinates: number[];
    companyName?: string;
  }
  
  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null); // New state for selected company

  const categories = ["All", ...new Set(companies.map((c) => c.category))];
  const commodityTypes = ["All", ...new Set(commodityPrices.map((c) => c.commodity))];

  const filteredCompanies =
    selectedCategory === "All"
      ? companies
      : companies.filter((c) => c.category === selectedCategory);

  const filteredCommodityPrices =
    selectedCommodity === "All"
      ? commodityPrices
      : commodityPrices.filter((c) => c.commodity === selectedCommodity);

  const filteredMarkets =
    selectedMarketCommodity === "All"
      ? markets
      : markets.filter((market) =>
          market.commodities.includes(selectedMarketCommodity)
        );

  useEffect(() => {
    if (displayMode === "temperature") {
      const fetchAllTemperatures = async () => {
        const tempData: { [key: string]: number } = {};
        for (const lga of lgas) {
          tempData[lga.name] = await fetchTemperature(lga.coordinates[0], lga.coordinates[1]);
        }
        setTemperatures(tempData);
      };
      fetchAllTemperatures();
    }
  }, [displayMode]);

  return (
    <div className="flex h-screen w-screen bg-gray-100">
      <Sidebar
        displayMode={displayMode}
        setDisplayMode={setDisplayMode}
        selectedCategory={selectedCategory}
        setSelectedCategory={setSelectedCategory}
        categories={categories}
        selectedCommodity={selectedCommodity}
        setSelectedCommodity={setSelectedCommodity}
        commodityTypes={commodityTypes}
        selectedCrop={selectedCrop}
        setSelectedCrop={setSelectedCrop}
        selectedLgaCrops={selectedLgaCrops} // Pass selectedLgaCrops
        selectedMarket={selectedMarket} // Pass selectedMarket to Sidebar
        selectedMarketCommodity={selectedMarketCommodity} // Pass selectedMarketCommodity to Sidebar
        setSelectedMarketCommodity={setSelectedMarketCommodity} // Pass setter to Sidebar
        selectedCompany={selectedCompany} // Pass selectedCompany to Sidebar
      />
      <MapContainer
        center={[10.3764, 7.7095]}
        zoom={9}
        style={{ height: "100%", width: "85%" }}
        scrollWheelZoom={true}
        className="shadow-lg rounded-lg"
      >
        <LayersControl position="topright">
          {/* Street View Layer */}
          <LayersControl.BaseLayer checked name="Street View">
            <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
          </LayersControl.BaseLayer>

          {/* Satellite View Layer */}
          <LayersControl.BaseLayer name="Satellite View">
            <TileLayer url="https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png" />
          </LayersControl.BaseLayer>
        </LayersControl>

        {/* Enable Irrigation Schemes Checkbox Only in Companies Mode */}
        {displayMode === "companies" && (
          <IrrigationSchemesToggleControl
            showIrrigationSchemes={showIrrigationSchemes}
            setShowIrrigationSchemes={setShowIrrigationSchemes}
          />
        )}

        {/* Render Irrigation Markers Only in Companies Mode */}
        {displayMode === "companies" &&
          showIrrigationSchemes &&
          irrigationSchemes.map((scheme, index) => (
            <Marker
              key={index}
              position={scheme.coordinates as [number, number]}
              icon={irrigationIcon}
              eventHandlers={{
                click: () => {
                  setSelectedIrrigationScheme({
                    name: scheme.name,
                    coordinates: scheme.coordinates as [number, number],
                  });
                },
              }}
            >
              <Popup>
                <h3 className="text-lg font-bold">{scheme.name}</h3>
                <p className="text-sm text-gray-700">
                  <strong>LGA:</strong> {scheme.lga}
                </p>
                <p className="text-sm text-gray-700">
                  <strong>Location:</strong> {scheme.location}
                </p>
                <p className="text-sm text-gray-700">
                  <strong>Size:</strong> {scheme.size}
                </p>
              </Popup>
            </Marker>
          ))}

        {/* Render Commodity Markers Only in Commodity Prices Mode */}
        {displayMode === "commodityPrices" &&
          filteredCommodityPrices.map((item) => {
            const lga = lgas.find((l) => l.name === item.lga);
            return (
              lga && (
                <Marker
                  key={`${item.lga}-${item.commodity}`}
                  position={lga.coordinates as [number, number]}
                  icon={customIcon} // Use a custom icon for commodities
                >
                  <Popup>
                    <h3 className="text-lg font-bold">{lga.name}</h3>
                    <p className="text-sm text-gray-700">
                      {item.commodity}:{" "}
                      <span className="font-bold">
                        ‚Ç¶{item.price.toLocaleString()}
                      </span>
                    </p>
                  </Popup>
                </Marker>
              )
            );
          })}

        {/* Render Crop Markers Only in Crops Mode */}
        {displayMode === "crops" &&
          lgacrops
            .filter((lga) => selectedCrop === "All" || lga.crops.includes(selectedCrop))
            .map((lga) =>
              lga.crops.map((crop, index) => (
                <Marker
                  key={`${lga.lga}-${crop}-${index}`}
                  position={lga.coordinates as [number, number]}
                  icon={cropIcons[crop] || cropIcons.Default} // Use crop icon or default icon
                  eventHandlers={{
                    click: () => {
                      setSelectedLgaCrops({ lga: lga.lga, crops: lga.crops });
                    },
                  }}
                >
                  <Popup>
                    <h3 className="text-lg font-bold">{lga.lga}</h3>
                    <p className="text-sm text-gray-700">
                      <strong>Crop:</strong> {crop}
                    </p>
                  </Popup>
                </Marker>
              ))
            )}

        {/* Render Company Markers */}
        {displayMode === "companies" && (
          isClusteringEnabled ? (
            <MarkerClusterGroup
              showCoverageOnHover={false}
              iconCreateFunction={createClusterCustomIcon}
            >
              {filteredCompanies.map((company) => {
                if (!company.coordinates || company.coordinates.length !== 2) {
                  console.warn(`Invalid coordinates for company: ${company.name}`);
                  return null;
                }

                // Get the icon for the company's category, or use the default icon
                const icon = categoryIcons[company.category] || categoryIcons.Default;

                return (
                  <Marker
                    key={company.id}
                    position={company.coordinates as [number, number]}
                    icon={icon}
                    eventHandlers={{
                      click: () => {
                        setSelectedCompany(company); // Set the selected company when marker is clicked
                      },
                    }}
                  >
                    {/* Center the map when this marker is clicked */}
                    {selectedCompany?.id === company.id && (
                      <CenterMapOnClick position={company.coordinates as [number, number]} />
                    )}
                    <Tooltip
                      permanent
                      direction="top"
                      offset={[0, -20]}
                      className="bg-white text-black p-2"
                    >
                      <strong className="font-bold">{company.name}</strong>
                    </Tooltip>
                  </Marker>
                );
              })}
            </MarkerClusterGroup>
          ) : (
            filteredCompanies.map((company) => {
              if (!company.coordinates || company.coordinates.length !== 2) {
                console.warn(`Invalid coordinates for company: ${company.name}`);
                return null;
              }

              // Get the icon for the company's category, or use the default icon
              const icon = categoryIcons[company.category] || categoryIcons.Default;

              return (
                <Marker
                  key={company.id}
                  position={company.coordinates as [number, number]}
                  icon={icon}
                  eventHandlers={{
                    click: () => {
                      setSelectedCompany(company); // Set the selected company when marker is clicked
                    },
                  }}
                >
                  {/* Center the map when this marker is clicked */}
                  {selectedCompany?.id === company.id && (
                    <CenterMapOnClick position={company.coordinates as [number, number]} />
                  )}
                  <Tooltip
                    permanent
                    direction="top"
                    offset={[0, -20]}
                    className="bg-white text-black p-2"
                  >
                    <strong className="font-bold">{company.name}</strong>
                  </Tooltip>
                </Marker>
              );
            })
          )
        )}

        {/* Other Display Modes */}
        {displayMode === "temperature" &&
          lgas.map((lga) => (
            <Marker
              key={lga.name}
              position={lga.coordinates as [number, number]}
              icon={customIcon}
            >
              <Tooltip
                permanent
                direction="top"
                offset={[0, -20]}
                className="bg-white text-black p-2 rounded-md shadow"
              >
                <strong className="text-sm text-gray-700">
                  {temperatures[lga.name] !== null
                    ? `${temperatures[lga.name]}¬∞C`
                    : "Loading..."}
                </strong>
                <p>{lga.name}</p>
              </Tooltip>
              <Popup>
                <h3 className="text-lg font-bold">{lga.name}</h3>
                <p className="text-sm text-gray-700">
                  Temperature:{" "}
                  {temperatures[lga.name] !== null
                    ? `${temperatures[lga.name]}¬∞C`
                    : "Loading..."}
                </p>
              </Popup>
            </Marker>
          ))}

        {/* Render Market Markers Only in Markets Mode */}
        {displayMode === "markets" &&
          filteredMarkets.map((market, index) => (
            <Marker
              key={index}
              position={[market.latitude, market.longitude]}
              icon={marketIcon} // Use the custom market icon
              eventHandlers={{
                click: () => {
                  setSelectedMarket(market); // Set the selected market when marker is clicked
                },
              }}
            >
              <Popup>
                <h3 className="text-lg font-bold">{market.name}</h3>
                <p className="text-sm text-gray-700">
                  <strong>LGA:</strong> {market.lga}
                </p>
                <p className="text-sm text-gray-700">
                  <strong>Operating Days:</strong> {market.operatingDays}
                </p>
                <p className="text-sm text-gray-700">
                  <strong>Description:</strong> {market.description}
                </p>
                <p className="text-sm text-gray-700">
                  <strong>Commodities:</strong> {market.commodities.join(", ")}
                </p>
              </Popup>
            </Marker>
          ))}

        <ClusteringToggleControl
          isClusteringEnabled={isClusteringEnabled}
          setIsClusteringEnabled={setIsClusteringEnabled}
        />

        {selectedCompany && <CenterMapOnClick position={selectedCompany.coordinates as [number, number]} />}
        {selectedIrrigationScheme && (
          <CenterMapOnClick position={selectedIrrigationScheme.coordinates} />
        )}
        {selectedMarket && (
          <CenterMapOnClick position={[selectedMarket.latitude, selectedMarket.longitude]} />
        )}
        {selectedMarket && (
          <div>Content</div>
        )}
      </MapContainer>
    </div>
  );
};

export default Map;