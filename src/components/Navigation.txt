"use client"

import * as React from "react"
// import Link from "next/link"

import { cn } from "@/lib/utils"
import { Icons } from "@/components/icons"
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu"

const components: { title: string; href: string; description: string }[] = [
  {
    title: "Alert Dialog",
    href: "/docs/primitives/alert-dialog",
    description:
      "A modal dialog that interrupts the user with important content and expects a response.",
  },
  {
    title: "Hover Card",
    href: "/docs/primitives/hover-card",
    description:
      "For sighted users to preview content available behind a link.",
  },
  {
    title: "Progress",
    href: "/docs/primitives/progress",
    description:
      "Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
  },
  {
    title: "Scroll-area",
    href: "/docs/primitives/scroll-area",
    description: "Visually or semantically separates content.",
  },
  {
    title: "Tabs",
    href: "/docs/primitives/tabs",
    description:
      "A set of layered sections of content—known as tab panels—that are displayed one at a time.",
  },
  {
    title: "Tooltip",
    href: "/docs/primitives/tooltip",
    description:
      "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
  },
]

export function NavigationMenuDemo() {
  return (
    <NavigationMenu>
      <NavigationMenuList>
        <NavigationMenuItem>
          <NavigationMenuTrigger>Getting started</NavigationMenuTrigger>
          <NavigationMenuContent>
            <ul className="grid gap-3 p-6 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]">
              <li className="row-span-3">
                <NavigationMenuLink asChild>
                  <a
                    className="flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-to-b from-muted/50 to-muted p-6 no-underline outline-none focus:shadow-md"
                    href="/"
                  >
                    <Icons.logo className="h-6 w-6" />
                    <div className="mb-2 mt-4 text-lg font-medium">
                      shadcn/ui
                    </div>
                    <p className="text-sm leading-tight text-muted-foreground">
                      Beautifully designed components that you can copy and
                      paste into your apps. Accessible. Customizable. Open
                      Source.
                    </p>
                  </a>
                </NavigationMenuLink>
              </li>
              <ListItem href="/docs" title="Introduction">
                Re-usable components built using Radix UI and Tailwind CSS.
              </ListItem>
              <ListItem href="/docs/installation" title="Installation">
                How to install dependencies and structure your app.
              </ListItem>
              <ListItem href="/docs/primitives/typography" title="Typography">
                Styles for headings, paragraphs, lists...etc
              </ListItem>
            </ul>
          </NavigationMenuContent>
        </NavigationMenuItem>
        <NavigationMenuItem>
          <NavigationMenuTrigger>Components</NavigationMenuTrigger>
          <NavigationMenuContent>
            <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px] ">
              {components.map((component) => (
                <ListItem
                  key={component.title}
                  title={component.title}
                  href={component.href}
                >
                  {component.description}
                </ListItem>
              ))}
            </ul>
          </NavigationMenuContent>
        </NavigationMenuItem>
        <NavigationMenuItem>
          <Link href="/docs" legacyBehavior passHref>
            <NavigationMenuLink className={navigationMenuTriggerStyle()}>
              Documentation
            </NavigationMenuLink>
          </Link>
        </NavigationMenuItem>
      </NavigationMenuList>
    </NavigationMenu>
  )
}

const ListItem = React.forwardRef<
  React.ElementRef<"a">,
  React.ComponentPropsWithoutRef<"a">
>(({ className, title, children, ...props }, ref) => {
  return (
    <li>
      <NavigationMenuLink asChild>
        <a
          ref={ref}
          className={cn(
            "block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
            className
          )}
          {...props}
        >
          <div className="text-sm font-medium leading-none">{title}</div>
          <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
            {children}
          </p>
        </a>
      </NavigationMenuLink>
    </li>
  )
})
ListItem.displayName = "ListItem"




======================================================
import React, { useState, useRef, useEffect, ReactNode } from 'react';
import { NavLink } from 'react-router-dom';
import { createPortal } from 'react-dom';

interface NavLinkClassProps { isActive: boolean; }
const navLinkClass = ({ isActive }: NavLinkClassProps): string =>
  isActive
    ? 'bg-green-600 text-white px-3 py-1 rounded-md shadow-sm text-sm transition-all'
    : 'bg-gray-700 text-gray-300 px-3 py-1 rounded-md shadow-sm text-sm transition-all hover:bg-gray-600 hover:text-white';

type DropdownType = 'farmingResources' | 'marketWeather' | 'stakeholdersExperts' | 'communitySupport' | null;

interface DropdownLink { to: string; label: string; }
interface DropdownProps {
  title: string;
  name: DropdownType;
  links: DropdownLink[];
  activeDropdown: DropdownType;
  toggleDropdown: (name: DropdownType) => void;
  handleLinkClick: () => void;
}

const Dropdown: React.FC<DropdownProps> = ({
  title,
  name,
  links,
  activeDropdown,
  toggleDropdown,
  handleLinkClick,
}) => {
  const isOpen = activeDropdown === name;
  const menuRef = useRef<HTMLUListElement>(null);
  const summaryId = `${name}-summary`;
  const menuId = `${name}-menu`;

  // Close on outside click
  useEffect(() => {
    const onClickOutside = (e: MouseEvent) => {
      if (isOpen && menuRef.current && !menuRef.current.contains(e.target as Node)) {
        toggleDropdown(null);
      }
    };
    document.addEventListener('mousedown', onClickOutside);
    return () => document.removeEventListener('mousedown', onClickOutside);
  }, [isOpen, toggleDropdown]);

  const dropdownList = (
    <ul
      id={menuId}
      ref={menuRef}
      role="menu"
      aria-labelledby={summaryId}
      className="bg-base-100 rounded-t-none p-2 space-y-1 absolute z-50 shadow-lg"
    >
      {links.map(l => (
        <li key={l.to} role="none">
          <NavLink
            to={l.to}
            className={navLinkClass}
            role="menuitem"
            onClick={handleLinkClick}
          >
            {l.label}
          </NavLink>
        </li>
      ))}
    </ul>
  );

  return (
    <div className="relative group">
      <button
        id={summaryId}
        aria-haspopup="true"
        aria-expanded={isOpen}
        aria-controls={menuId}
        className="flex items-center px-3 py-1 text-sm text-gray-200 hover:text-white focus:outline-none"
        onClick={() => toggleDropdown(name)}
        onKeyDown={e => {
          if (e.key === 'Enter' || e.key === ' ') toggleDropdown(name);
        }}
      >
        {title}
        <svg
          className={`ml-1 transition-transform ${isOpen ? 'rotate-180' : ''}`}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          width={16}
          height={16}
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      {isOpen ? createPortal(dropdownList, document.body) : null}
    </div>
  );
};

const Navigation: React.FC = () => {
  const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);
  const [activeDropdown, setActiveDropdown] = useState<DropdownType>(null);

  const toggleMenu = (): void => {
    setIsMenuOpen(prev => !prev);
    setActiveDropdown(null);
  };

  const handleLinkClick = (): void => {
    setIsMenuOpen(false);
    setActiveDropdown(null);
  };

  const toggleDropdown = (name: DropdownType): void => {
    setActiveDropdown(prev => (prev === name ? null : name));
  };

  return (
    <nav className="relative z-50">
      {/* Backdrop for mobile menu */}
      {isMenuOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={toggleMenu}
          aria-hidden="true"
        />
      )}

      <div className="navbar bg-base-100 shadow-sm flex justify-between items-center px-4 py-2">
        <NavLink to="/" className="btn btn-ghost normal-case text-xl text-green-700">
          AgriPlatform
        </NavLink>

        {/* Hamburger Icon for Mobile */}
        <button
          className="lg:hidden text-gray-700 focus:outline-none"
          aria-label="Toggle menu"
          aria-expanded={isMenuOpen}
          onClick={toggleMenu}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
          </svg>
        </button>

        {/* Desktop Menu */}
        <ul className="hidden lg:flex menu menu-horizontal px-1 space-x-2 items-center">
          <li><NavLink to="/" className={navLinkClass}>Home</NavLink></li>
          <li><NavLink to="/about" className={navLinkClass}>About</NavLink></li>
          <li><NavLink to="/maps" className={navLinkClass}>GIS Dashboard</NavLink></li>
          <li><NavLink to="/dashboard" className={navLinkClass}>Dashboard</NavLink></li>

          <Dropdown
            title="Farming Resources"
            name="farmingResources"
            links={[
              { to: '/resources-training', label: 'Resources & Training' },
              { to: '/precision-farming', label: 'Precision Farming' },
              { to: '/seasonal-farming-tips', label: 'Seasonal Farming Tips' },
            ]}
            activeDropdown={activeDropdown}
            toggleDropdown={toggleDropdown}
            handleLinkClick={handleLinkClick}
          />

          <Dropdown
            title="Market & Weather"
            name="marketWeather"
            links={[
              { to: '/market', label: 'Market Information' },
              { to: '/weather', label: 'Weather Information' },
              { to: '/drone-imagery', label: 'Drone Imagery' },
            ]}
            activeDropdown={activeDropdown}
            toggleDropdown={toggleDropdown}
            handleLinkClick={handleLinkClick}
          />

          <Dropdown
            title="Stakeholders & Experts"
            name="stakeholdersExperts"
            links={[
              { to: '/experts', label: 'Agricultural Experts' },
              { to: '/stakeholders', label: 'Stakeholders' },
              { to: '/stakeholders-map', label: 'Stakeholders Map' },
            ]}
            activeDropdown={activeDropdown}
            toggleDropdown={toggleDropdown}
            handleLinkClick={handleLinkClick}
          />

          <Dropdown
            title="Community & Support"
            name="communitySupport"
            links={[
              { to: '/farmers-forum', label: 'Farmers Forum' },
              { to: '/faqs', label: 'FAQs' },
            ]}
            activeDropdown={activeDropdown}
            toggleDropdown={toggleDropdown}
            handleLinkClick={handleLinkClick}
          />
        </ul>
      </div>

      {/* Mobile Menu (Slide-in) */}
      <div
        className={`fixed top-0 left-0 h-full w-64 bg-base-100 shadow-lg transform transition-transform duration-300 z-50 lg:hidden ${
          isMenuOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
        aria-hidden={!isMenuOpen}
      >
        <ul className="menu menu-vertical px-2 py-4 space-y-2">
          <li><NavLink to="/" className={navLinkClass} onClick={handleLinkClick}>Home</NavLink></li>
          <li><NavLink to="/about" className={navLinkClass} onClick={handleLinkClick}>About</NavLink></li>
          <li><NavLink to="/maps" className={navLinkClass} onClick={handleLinkClick}>GIS Dashboard</NavLink></li>
          <li><NavLink to="/dashboard" className={navLinkClass} onClick={handleLinkClick}>Dashboard</NavLink></li>

          {/* Replicate Dropdown sections for mobile if needed or flatten */}
          <li><NavLink to="/resources-training" className={navLinkClass} onClick={handleLinkClick}>Resources & Training</NavLink></li>
          <li><NavLink to="/precision-farming" className={navLinkClass} onClick={handleLinkClick}>Precision Farming</NavLink></li>
          <li><NavLink to="/seasonal-farming-tips" className={navLinkClass} onClick={handleLinkClick}>Seasonal Farming Tips</NavLink></li>
          <li><NavLink to="/market" className={navLinkClass} onClick={handleLinkClick}>Market Information</NavLink></li>
          <li><NavLink to="/weather" className={navLinkClass} onClick={handleLinkClick}>Weather Information</NavLink></li>
          <li><NavLink to="/drone-imagery" className={navLinkClass} onClick={handleLink
